define(['dart_sdk', 'packages/quiver/src/core/hash.dart', 'packages/cloud_firestore_platform_interface/src/platform_interface/platform_interface_write_batch.dart', 'packages/cloud_firestore_platform_interface/src/field_path.dart', 'packages/cloud_firestore_platform_interface/src/get_options.dart', 'packages/cloud_firestore_platform_interface/src/source.dart', 'packages/collection/src/equality.dart', 'packages/cloud_firestore_platform_interface/src/set_options.dart', 'packages/cloud_firestore_platform_interface/src/platform_interface/platform_interface_field_value.dart', 'packages/firebase_core/firebase_core.dart', 'packages/firebase_core_platform_interface/firebase_core_platform_interface.dart', 'packages/cloud_firestore_platform_interface/src/persistence_settings.dart', 'packages/cloud_firestore_platform_interface/src/settings.dart', 'packages/cloud_firestore_platform_interface/src/snapshot_metadata.dart'], (function load__packages__cloud_firestore__cloud_firestore_dart(dart_sdk, packages__quiver__src__core__hash$46dart, packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_write_batch$46dart, packages__cloud_firestore_platform_interface__src__field_path$46dart, packages__cloud_firestore_platform_interface__src__get_options$46dart, packages__cloud_firestore_platform_interface__src__source$46dart, packages__collection__src__equality$46dart, packages__cloud_firestore_platform_interface__src__set_options$46dart, packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_field_value$46dart, packages__firebase_core__firebase_core$46dart, packages__firebase_core_platform_interface__firebase_core_platform_interface$46dart, packages__cloud_firestore_platform_interface__src__persistence_settings$46dart, packages__cloud_firestore_platform_interface__src__settings$46dart, packages__cloud_firestore_platform_interface__src__snapshot_metadata$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const hash = packages__quiver__src__core__hash$46dart.src__core__hash;
  const platform_interface_query = packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_write_batch$46dart.src__platform_interface__platform_interface_query;
  const platform_interface_query_snapshot = packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_write_batch$46dart.src__platform_interface__platform_interface_query_snapshot;
  const platform_interface_collection_reference = packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_write_batch$46dart.src__platform_interface__platform_interface_collection_reference;
  const platform_interface_document_change = packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_write_batch$46dart.src__platform_interface__platform_interface_document_change;
  const platform_interface_document_reference = packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_write_batch$46dart.src__platform_interface__platform_interface_document_reference;
  const cloud_firestore_platform_interface = packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_write_batch$46dart.cloud_firestore_platform_interface;
  const platform_interface_document_snapshot = packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_write_batch$46dart.src__platform_interface__platform_interface_document_snapshot;
  const platform_interface_field_value_factory = packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_write_batch$46dart.src__platform_interface__platform_interface_field_value_factory;
  const platform_interface_firestore = packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_write_batch$46dart.src__platform_interface__platform_interface_firestore;
  const platform_interface_transaction = packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_write_batch$46dart.src__platform_interface__platform_interface_transaction;
  const platform_interface_write_batch = packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_write_batch$46dart.src__platform_interface__platform_interface_write_batch;
  const field_path = packages__cloud_firestore_platform_interface__src__field_path$46dart.src__field_path;
  const get_options = packages__cloud_firestore_platform_interface__src__get_options$46dart.src__get_options;
  const source = packages__cloud_firestore_platform_interface__src__source$46dart.src__source;
  const equality = packages__collection__src__equality$46dart.src__equality;
  const set_options = packages__cloud_firestore_platform_interface__src__set_options$46dart.src__set_options;
  const platform_interface_field_value = packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_field_value$46dart.src__platform_interface__platform_interface_field_value;
  const firebase_core = packages__firebase_core__firebase_core$46dart.firebase_core;
  const firebase_core_platform_interface = packages__firebase_core_platform_interface__firebase_core_platform_interface$46dart.firebase_core_platform_interface;
  const persistence_settings = packages__cloud_firestore_platform_interface__src__persistence_settings$46dart.src__persistence_settings;
  const settings = packages__cloud_firestore_platform_interface__src__settings$46dart.src__settings;
  const snapshot_metadata = packages__cloud_firestore_platform_interface__src__snapshot_metadata$46dart.src__snapshot_metadata;
  var cloud_firestore = Object.create(dart.library);
  var $isNotEmpty = dartx.isNotEmpty;
  var $contains = dartx.contains;
  var $_get = dartx._get;
  var $add = dartx.add;
  var $last = dartx.last;
  var $length = dartx.length;
  var $isEmpty = dartx.isEmpty;
  var $where = dartx.where;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $toString = dartx.toString;
  var $containsKey = dartx.containsKey;
  var $_set = dartx._set;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $updateAll = dartx.updateAll;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    DocumentReferenceL: () => (T$.DocumentReferenceL = dart.constFn(dart.legacy(cloud_firestore.DocumentReference)))(),
    CollectionReferenceL: () => (T$.CollectionReferenceL = dart.constFn(dart.legacy(cloud_firestore.CollectionReference)))(),
    ListL: () => (T$.ListL = dart.constFn(dart.legacy(core.List)))(),
    ListOfListL: () => (T$.ListOfListL = dart.constFn(core.List$(T$.ListL())))(),
    StateErrorL: () => (T$.StateErrorL = dart.constFn(dart.legacy(core.StateError)))(),
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    IdentityMapOfStringL$dynamic: () => (T$.IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), dart.dynamic)))(),
    FieldPathL: () => (T$.FieldPathL = dart.constFn(dart.legacy(field_path.FieldPath)))(),
    QuerySnapshotL: () => (T$.QuerySnapshotL = dart.constFn(dart.legacy(cloud_firestore.QuerySnapshot)))(),
    QuerySnapshotPlatformL: () => (T$.QuerySnapshotPlatformL = dart.constFn(dart.legacy(platform_interface_query_snapshot.QuerySnapshotPlatform)))(),
    QuerySnapshotPlatformLToQuerySnapshotL: () => (T$.QuerySnapshotPlatformLToQuerySnapshotL = dart.constFn(dart.fnType(T$.QuerySnapshotL(), [T$.QuerySnapshotPlatformL()])))(),
    boolL: () => (T$.boolL = dart.constFn(dart.legacy(core.bool)))(),
    ListLToboolL: () => (T$.ListLToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$.ListL()])))(),
    DefaultEqualityOfNeverL: () => (T$.DefaultEqualityOfNeverL = dart.constFn(equality.DefaultEquality$(dart.legacy(dart.Never))))(),
    dynamicAndStringLAnddynamicTovoid: () => (T$.dynamicAndStringLAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, T$.StringL(), dart.dynamic])))(),
    dynamicToboolL: () => (T$.dynamicToboolL = dart.constFn(dart.fnType(T$.boolL(), [dart.dynamic])))(),
    DocumentSnapshotL: () => (T$.DocumentSnapshotL = dart.constFn(dart.legacy(cloud_firestore.DocumentSnapshot)))(),
    DocumentSnapshotPlatformL: () => (T$.DocumentSnapshotPlatformL = dart.constFn(dart.legacy(platform_interface_document_snapshot.DocumentSnapshotPlatform)))(),
    DocumentSnapshotPlatformLToDocumentSnapshotL: () => (T$.DocumentSnapshotPlatformLToDocumentSnapshotL = dart.constFn(dart.fnType(T$.DocumentSnapshotL(), [T$.DocumentSnapshotPlatformL()])))(),
    FieldValueL: () => (T$.FieldValueL = dart.constFn(dart.legacy(cloud_firestore.FieldValue)))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    FutureLOfNull: () => (T$.FutureLOfNull = dart.constFn(dart.legacy(T$.FutureOfNull())))(),
    TransactionPlatformL: () => (T$.TransactionPlatformL = dart.constFn(dart.legacy(platform_interface_transaction.TransactionPlatform)))(),
    TransactionPlatformLToFutureLOfNull: () => (T$.TransactionPlatformLToFutureLOfNull = dart.constFn(dart.fnType(T$.FutureLOfNull(), [T$.TransactionPlatformL()])))(),
    FirebaseFirestoreL: () => (T$.FirebaseFirestoreL = dart.constFn(dart.legacy(cloud_firestore.FirebaseFirestore)))(),
    IdentityMapOfStringL$FirebaseFirestoreL: () => (T$.IdentityMapOfStringL$FirebaseFirestoreL = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), T$.FirebaseFirestoreL())))(),
    QueryDocumentSnapshotL: () => (T$.QueryDocumentSnapshotL = dart.constFn(dart.legacy(cloud_firestore.QueryDocumentSnapshot)))(),
    DocumentSnapshotPlatformLToQueryDocumentSnapshotL: () => (T$.DocumentSnapshotPlatformLToQueryDocumentSnapshotL = dart.constFn(dart.fnType(T$.QueryDocumentSnapshotL(), [T$.DocumentSnapshotPlatformL()])))(),
    DocumentChangeL: () => (T$.DocumentChangeL = dart.constFn(dart.legacy(cloud_firestore.DocumentChange)))(),
    DocumentChangePlatformL: () => (T$.DocumentChangePlatformL = dart.constFn(dart.legacy(platform_interface_document_change.DocumentChangePlatform)))(),
    DocumentChangePlatformLToDocumentChangeL: () => (T$.DocumentChangePlatformLToDocumentChangeL = dart.constFn(dart.fnType(T$.DocumentChangeL(), [T$.DocumentChangePlatformL()])))(),
    LinkedHashMapOfStringL$dynamic: () => (T$.LinkedHashMapOfStringL$dynamic = dart.constFn(collection.LinkedHashMap$(T$.StringL(), dart.dynamic)))(),
    StringLAnddynamicTodynamic: () => (T$.StringLAnddynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.StringL(), dart.dynamic])))(),
    dynamicTodynamic: () => (T$.dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))(),
    MapL: () => (T$.MapL = dart.constFn(dart.legacy(core.Map)))(),
    DocumentReferencePlatformL: () => (T$.DocumentReferencePlatformL = dart.constFn(dart.legacy(platform_interface_document_reference.DocumentReferencePlatform)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: source.Source.prototype,
        [_name]: "Source.serverAndCache",
        index: 0
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: get_options.GetOptions.prototype,
        [GetOptions_source]: C[1] || CT.C1
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: T$.DefaultEqualityOfNeverL().prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: equality.ListEquality.prototype,
        [ListEquality__elementEquality]: C[3] || CT.C3
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 30000000
      });
    }
  }, false);
  var C = Array(5).fill(void 0);
  var I = [
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-0.16.0+1/lib/src/collection_reference.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-0.16.0+1/lib/src/query.dart",
    "package:cloud_firestore/cloud_firestore.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-0.16.0+1/lib/src/document_reference.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-0.16.0+1/lib/src/firestore.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-0.16.0+1/lib/src/transaction.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-0.16.0+1/lib/src/write_batch.dart"
  ];
  var _delegate$ = dart.privateName(cloud_firestore, "CollectionReference._delegate");
  var _delegate$0 = dart.privateName(cloud_firestore, "_delegate");
  var firestore$ = dart.privateName(cloud_firestore, "Query.firestore");
  var _delegate$1 = dart.privateName(cloud_firestore, "Query._delegate");
  var _hasStartCursor = dart.privateName(cloud_firestore, "_hasStartCursor");
  var _hasEndCursor = dart.privateName(cloud_firestore, "_hasEndCursor");
  var _isInequality = dart.privateName(cloud_firestore, "_isInequality");
  var _assertQueryCursorSnapshot = dart.privateName(cloud_firestore, "_assertQueryCursorSnapshot");
  var _assertQueryCursorValues = dart.privateName(cloud_firestore, "_assertQueryCursorValues");
  var _assertValidFieldType = dart.privateName(cloud_firestore, "_assertValidFieldType");
  var _name = dart.privateName(source, "_name");
  var GetOptions_source = dart.privateName(get_options, "GetOptions.source");
  var ListEquality__elementEquality = dart.privateName(equality, "ListEquality._elementEquality");
  cloud_firestore.Query = class Query extends core.Object {
    get firestore() {
      return this[firestore$];
    }
    set firestore(value) {
      super.firestore = value;
    }
    get [_delegate$0]() {
      return this[_delegate$1];
    }
    set [_delegate$0](value) {
      super[_delegate$0] = value;
    }
    get parameters() {
      return this[_delegate$0].parameters;
    }
    [_hasStartCursor]() {
      return this.parameters[$_get]("startAt") != null || this.parameters[$_get]("startAfter") != null;
    }
    [_hasEndCursor]() {
      return this.parameters[$_get]("endAt") != null || this.parameters[$_get]("endBefore") != null;
    }
    [_isInequality](operator) {
      return operator === "<" || operator === "<=" || operator === ">" || operator === ">=" || operator === "!=";
    }
    [_assertQueryCursorSnapshot](documentSnapshot) {
      if (!(documentSnapshot != null)) dart.assertFailed(null, I[1], 56, 12, "documentSnapshot != null");
      if (!dart.test(documentSnapshot.exists)) dart.assertFailed("a document snapshot must exist to be used within a query", I[1], 57, 12, "documentSnapshot.exists");
      let orders = T$.ListOfListL().from(core.Iterable.as(this.parameters[$_get]("orderBy")));
      let values = [];
      for (let order of orders) {
        let field = order[$_get](0);
        if (!dart.equals(field, field_path.FieldPath.documentId)) {
          try {
            values[$add](documentSnapshot.get(field));
          } catch (e) {
            let ex = dart.getThrown(e);
            if (T$.StateErrorL().is(ex)) {
              dart.throw("You are trying to start or end a query using a document for which the field '" + dart.str(field) + "' (used as the orderBy) does not exist.");
            } else
              throw e;
          }
        }
      }
      if (dart.test(orders[$isNotEmpty])) {
        let lastOrder = orders[$last];
        if (!dart.equals(lastOrder[$_get](0), field_path.FieldPath.documentId)) {
          orders[$add]([field_path.FieldPath.documentId, lastOrder[$_get](1)]);
        }
      } else {
        orders[$add]([field_path.FieldPath.documentId, false]);
      }
      if (dart.test(this[_delegate$0].isCollectionGroupQuery)) {
        values[$add](documentSnapshot.reference.path);
      } else {
        values[$add](documentSnapshot.id);
      }
      return new (T$.IdentityMapOfStringL$dynamic()).from(["orders", orders, "values", values]);
    }
    [_assertQueryCursorValues](fields) {
      if (!(fields != null)) dart.assertFailed(null, I[1], 103, 12, "fields != null");
      let orders = T$.ListOfListL().from(core.Iterable.as(this.parameters[$_get]("orderBy")));
      if (!(dart.notNull(fields[$length]) <= dart.notNull(orders[$length]))) dart.assertFailed("Too many arguments provided. The number of arguments must be less than or equal to the number of orderBy() clauses.", I[1], 106, 12, "fields.length <= orders.length");
      return fields;
    }
    [_assertValidFieldType](field) {
      if (!(T$.StringL().is(field) || T$.FieldPathL().is(field) || dart.equals(field, field_path.FieldPath.documentId))) dart.assertFailed("Supported [field] types are [String] and [FieldPath].", I[1], 115, 9, "field is String || field is FieldPath || field == FieldPath.documentId");
    }
    endAtDocument(documentSnapshot) {
      let results = this[_assertQueryCursorSnapshot](documentSnapshot);
      return new cloud_firestore.Query.__(this.firestore, this[_delegate$0].endAtDocument(T$.ListL().as(results[$_get]("orders")), T$.ListL().as(results[$_get]("values"))));
    }
    endAt(values) {
      this[_assertQueryCursorValues](values);
      return new cloud_firestore.Query.__(this.firestore, this[_delegate$0].endAt(values));
    }
    endBeforeDocument(documentSnapshot) {
      let results = this[_assertQueryCursorSnapshot](documentSnapshot);
      return new cloud_firestore.Query.__(this.firestore, this[_delegate$0].endBeforeDocument(T$.ListL().as(results[$_get]("orders")), T$.ListL().as(results[$_get]("values"))));
    }
    endBefore(values) {
      this[_assertQueryCursorValues](values);
      return new cloud_firestore.Query.__(this.firestore, this[_delegate$0].endBefore(values));
    }
    get(options = null) {
      return async.async(T$.QuerySnapshotL(), (function* get() {
        let t2;
        let snapshotDelegate = (yield this[_delegate$0].get((t2 = options, t2 == null ? C[0] || CT.C0 : t2)));
        return new cloud_firestore.QuerySnapshot.__(this.firestore, snapshotDelegate);
      }).bind(this));
    }
    limit(limit) {
      if (!(dart.notNull(limit) > 0)) dart.assertFailed("limit must be a positive number greater than 0", I[1], 186, 12, "limit > 0");
      return new cloud_firestore.Query.__(this.firestore, this[_delegate$0].limit(limit));
    }
    limitToLast(limit) {
      if (!(dart.notNull(limit) > 0)) dart.assertFailed("limit must be a positive number greater than 0", I[1], 195, 12, "limit > 0");
      let orders = T$.ListOfListL().from(core.Iterable.as(this.parameters[$_get]("orderBy")));
      if (!dart.test(orders[$isNotEmpty])) dart.assertFailed("limitToLast() queries require specifying at least one orderBy() clause", I[1], 197, 12, "orders.isNotEmpty");
      return new cloud_firestore.Query.__(this.firestore, this[_delegate$0].limitToLast(limit));
    }
    snapshots(opts) {
      let includeMetadataChanges = opts && 'includeMetadataChanges' in opts ? opts.includeMetadataChanges : false;
      return this[_delegate$0].snapshots({includeMetadataChanges: includeMetadataChanges}).map(T$.QuerySnapshotL(), dart.fn(item => new cloud_firestore.QuerySnapshot.__(this.firestore, item), T$.QuerySnapshotPlatformLToQuerySnapshotL()));
    }
    orderBy(field, opts) {
      let descending = opts && 'descending' in opts ? opts.descending : false;
      if (!(field != null && descending != null)) dart.assertFailed(null, I[1], 222, 12, "field != null && descending != null");
      this[_assertValidFieldType](field);
      if (!!dart.test(this[_hasStartCursor]())) dart.assertFailed("Invalid query. You must not call startAt(), startAtDocument(), startAfter() or startAfterDocument() before calling orderBy()", I[1], 224, 12, "!_hasStartCursor()");
      if (!!dart.test(this[_hasEndCursor]())) dart.assertFailed("Invalid query. You must not call endAt(), endAtDocument(), endBefore() or endBeforeDocument() before calling orderBy()", I[1], 226, 12, "!_hasEndCursor()");
      let orders = T$.ListOfListL().from(core.Iterable.as(this.parameters[$_get]("orderBy")));
      if (!dart.test(orders[$where](dart.fn(item => dart.equals(field, item[$_get](0)), T$.ListLToboolL()))[$isEmpty])) dart.assertFailed("OrderBy field '" + dart.str(field) + "' already exists in this query", I[1], 232, 12, "orders.where((List<dynamic> item) => field == item[0]).isEmpty");
      if (dart.equals(field, field_path.FieldPath.documentId)) {
        orders[$add]([field, descending]);
      } else {
        let fieldPath = T$.FieldPathL().as(T$.StringL().is(field) ? new field_path.FieldPath.fromString(field) : field);
        orders[$add]([fieldPath, descending]);
      }
      let conditions = T$.ListOfListL().from(core.Iterable.as(this.parameters[$_get]("where")));
      if (dart.test(conditions[$isNotEmpty])) {
        for (let condition of conditions) {
          let field = dart.dsend(condition, '_get', [0]);
          let operator = T$.StringL().as(dart.dsend(condition, '_get', [1]));
          if (dart.test(this[_isInequality](operator))) {
            if (!dart.equals(field, orders[$_get](0)[$_get](0))) dart.assertFailed("The initial orderBy() field '" + dart.str(orders) + "[0][0]' has to be the same as the where() field parameter '" + dart.str(field) + "' when an inequality operator is invoked.", I[1], 254, 18, "field == orders[0][0]");
          }
          for (let order of orders) {
            let orderField = dart.dsend(order, '_get', [0]);
            if (operator === "==") {
              if (!!dart.equals(field, orderField)) dart.assertFailed("The '" + dart.str(orderField) + "' cannot be the same as your where() field parameter '" + dart.str(field) + "'.", I[1], 264, 20, "field != orderField");
            }
            if (dart.equals(field, field_path.FieldPath.documentId)) {
              if (!dart.equals(orderField, field_path.FieldPath.documentId)) dart.assertFailed("'[FieldPath.documentId]' cannot be used in conjunction with a different orderBy() parameter.", I[1], 269, 20, "orderField == FieldPath.documentId");
            }
          }
        }
      }
      return new cloud_firestore.Query.__(this.firestore, this[_delegate$0].orderBy(orders));
    }
    startAfterDocument(documentSnapshot) {
      let results = this[_assertQueryCursorSnapshot](documentSnapshot);
      return new cloud_firestore.Query.__(this.firestore, this[_delegate$0].startAfterDocument(T$.ListL().as(results[$_get]("orders")), T$.ListL().as(results[$_get]("values"))));
    }
    startAfter(values) {
      this[_assertQueryCursorValues](values);
      return new cloud_firestore.Query.__(this.firestore, this[_delegate$0].startAfter(values));
    }
    startAtDocument(documentSnapshot) {
      let results = this[_assertQueryCursorSnapshot](documentSnapshot);
      return new cloud_firestore.Query.__(this.firestore, this[_delegate$0].startAtDocument(T$.ListL().as(results[$_get]("orders")), T$.ListL().as(results[$_get]("values"))));
    }
    startAt(values) {
      this[_assertQueryCursorValues](values);
      return new cloud_firestore.Query.__(this.firestore, this[_delegate$0].startAt(values));
    }
    where(field, opts) {
      let isEqualTo = opts && 'isEqualTo' in opts ? opts.isEqualTo : null;
      let isNotEqualTo = opts && 'isNotEqualTo' in opts ? opts.isNotEqualTo : null;
      let isLessThan = opts && 'isLessThan' in opts ? opts.isLessThan : null;
      let isLessThanOrEqualTo = opts && 'isLessThanOrEqualTo' in opts ? opts.isLessThanOrEqualTo : null;
      let isGreaterThan = opts && 'isGreaterThan' in opts ? opts.isGreaterThan : null;
      let isGreaterThanOrEqualTo = opts && 'isGreaterThanOrEqualTo' in opts ? opts.isGreaterThanOrEqualTo : null;
      let arrayContains = opts && 'arrayContains' in opts ? opts.arrayContains : null;
      let arrayContainsAny = opts && 'arrayContainsAny' in opts ? opts.arrayContainsAny : null;
      let whereIn = opts && 'whereIn' in opts ? opts.whereIn : null;
      let whereNotIn = opts && 'whereNotIn' in opts ? opts.whereNotIn : null;
      let isNull = opts && 'isNull' in opts ? opts.isNull : null;
      this[_assertValidFieldType](field);
      let equality = C[2] || CT.C2;
      let conditions = T$.ListOfListL().from(core.Iterable.as(this.parameters[$_get]("where")));
      function addCondition(field, operator, value) {
        let condition = null;
        value = cloud_firestore._CodecUtility.valueEncode(value);
        if (dart.equals(field, field_path.FieldPath.documentId)) {
          condition = [field, operator, value];
        } else {
          let fieldPath = T$.StringL().is(field) ? new field_path.FieldPath.fromString(field) : T$.FieldPathL().as(field);
          condition = [fieldPath, operator, value];
        }
        if (!dart.test(conditions[$where](dart.fn(item => equality.equals(condition, item), T$.ListLToboolL()))[$isEmpty])) dart.assertFailed("Condition " + dart.str(condition) + " already exists in this query.", I[1], 370, 11, "conditions\n              .where((List<dynamic> item) => equality.equals(condition, item))\n              .isEmpty");
        conditions[$add](condition);
      }
      dart.fn(addCondition, T$.dynamicAndStringLAnddynamicTovoid());
      if (isEqualTo != null) addCondition(field, "==", isEqualTo);
      if (isNotEqualTo != null) addCondition(field, "!=", isNotEqualTo);
      if (isLessThan != null) addCondition(field, "<", isLessThan);
      if (isLessThanOrEqualTo != null) {
        addCondition(field, "<=", isLessThanOrEqualTo);
      }
      if (isGreaterThan != null) addCondition(field, ">", isGreaterThan);
      if (isGreaterThanOrEqualTo != null) {
        addCondition(field, ">=", isGreaterThanOrEqualTo);
      }
      if (arrayContains != null) {
        addCondition(field, "array-contains", arrayContains);
      }
      if (arrayContainsAny != null) {
        addCondition(field, "array-contains-any", arrayContainsAny);
      }
      if (whereIn != null) addCondition(field, "in", whereIn);
      if (whereNotIn != null) addCondition(field, "not-in", whereNotIn);
      if (isNull != null) {
        if (!dart.test(isNull)) dart.assertFailed("isNull can only be set to true. " + "Use isEqualTo to filter on non-null values.", I[1], 397, 11, "isNull");
        addCondition(field, "==", null);
      }
      let hasInequality = null;
      let hasIn = false;
      let hasNotIn = false;
      let hasNotEqualTo = false;
      let hasArrayContains = false;
      let hasArrayContainsAny = false;
      for (let condition of conditions) {
        let field = dart.dsend(condition, '_get', [0]);
        let operator = T$.StringL().as(dart.dsend(condition, '_get', [1]));
        let value = dart.dsend(condition, '_get', [2]);
        let orders = T$.ListOfListL().from(core.Iterable.as(this.parameters[$_get]("orderBy")));
        if (dart.test(this[_isInequality](operator)) && dart.test(orders[$isNotEmpty])) {
          if (!dart.equals(field, orders[$_get](0)[$_get](0))) dart.assertFailed("The initial orderBy() field '" + dart.str(orders) + "[0][0]' has to be the same as the where() field parameter '" + dart.str(field) + "' when an inequality operator is invoked.", I[1], 421, 16, "field == orders[0][0]");
        }
        if (value == null) {
          if (!(operator === "==")) dart.assertFailed("You can only perform equals comparisons on null.", I[1], 426, 16, "operator == '=='");
        }
        if (operator === "in" || operator === "array-contains-any" || operator === "not-in") {
          if (!T$.ListL().is(value)) dart.assertFailed("A non-empty [List] is required for '" + dart.str(operator) + "' filters.", I[1], 433, 16, "value is List");
          if (!(dart.notNull(T$.ListL().as(value)[$length]) <= 10)) dart.assertFailed("'" + dart.str(operator) + "' filters support a maximum of 10 elements in the value [List].", I[1], 435, 16, "(value as List).length <= 10");
          if (!dart.test(T$.ListL().as(value)[$isNotEmpty])) dart.assertFailed("'" + dart.str(operator) + "' filters require a non-empty [List].", I[1], 437, 16, "(value as List).isNotEmpty");
          if (!dart.test(T$.ListL().as(value)[$where](dart.fn(value => value == null, T$.dynamicToboolL()))[$isEmpty])) dart.assertFailed("'" + dart.str(operator) + "' filters cannot contain 'null' in the [List].", I[1], 439, 16, "(value as List).where((value) => value == null).isEmpty");
        }
        if (operator === "!=") {
          if (!!hasNotEqualTo) dart.assertFailed("You cannot use '!=' filters more than once.", I[1], 444, 16, "!hasNotEqualTo");
          if (!!hasNotIn) dart.assertFailed("You cannot use '!=' filters with 'not-in' filters.", I[1], 445, 16, "!hasNotIn");
          hasNotEqualTo = true;
        }
        if (operator === "not-in") {
          if (!!hasNotIn) dart.assertFailed("You cannot use 'not-in' filters more than once.", I[1], 450, 16, "!hasNotIn");
          if (!!hasNotEqualTo) dart.assertFailed("You cannot use 'not-in' filters with '!=' filters.", I[1], 451, 16, "!hasNotEqualTo");
        }
        if (operator === "in") {
          if (!!hasIn) dart.assertFailed("You cannot use 'whereIn' filters more than once.", I[1], 456, 16, "!hasIn");
          hasIn = true;
        }
        if (operator === "array-contains") {
          if (!!hasArrayContains) dart.assertFailed("You cannot use 'array-contains' filters more than once.", I[1], 461, 16, "!hasArrayContains");
          hasArrayContains = true;
        }
        if (operator === "array-contains-any") {
          if (!!hasArrayContainsAny) dart.assertFailed("You cannot use 'array-contains-any' filters more than once.", I[1], 467, 16, "!hasArrayContainsAny");
          hasArrayContainsAny = true;
        }
        if (operator === "array-contains-any" || operator === "in") {
          if (!!(hasIn && hasArrayContainsAny)) dart.assertFailed("You cannot use 'in' filters with 'array-contains-any' filters.", I[1], 473, 16, "!(hasIn && hasArrayContainsAny)");
        }
        if (operator === "array-contains" || operator === "array-contains-any") {
          if (!!(hasArrayContains && hasArrayContainsAny)) dart.assertFailed("You cannot use both 'array-contains-any' or 'array-contains' filters together.", I[1], 478, 16, "!(hasArrayContains && hasArrayContainsAny)");
        }
        if (dart.test(this[_isInequality](operator))) {
          if (hasInequality == null) {
            hasInequality = field;
          } else {
            if (!dart.equals(hasInequality, field)) dart.assertFailed("All where filters with an inequality (<, <=, >, or >=) must be on the same field. But you have inequality filters on '" + dart.str(hasInequality) + "' and '" + dart.str(field) + "'.", I[1], 486, 18, "hasInequality == field");
          }
        }
      }
      return new cloud_firestore.Query.__(this.firestore, this[_delegate$0].where(conditions));
    }
  };
  (cloud_firestore.Query.__ = function(firestore, _delegate) {
    this[firestore$] = firestore;
    this[_delegate$1] = _delegate;
    platform_interface_query.QueryPlatform.verifyExtends(this[_delegate$0]);
  }).prototype = cloud_firestore.Query.prototype;
  dart.addTypeTests(cloud_firestore.Query);
  dart.addTypeCaches(cloud_firestore.Query);
  dart.setMethodSignature(cloud_firestore.Query, () => ({
    __proto__: dart.getMethods(cloud_firestore.Query.__proto__),
    [_hasStartCursor]: dart.fnType(dart.legacy(core.bool), []),
    [_hasEndCursor]: dart.fnType(dart.legacy(core.bool), []),
    [_isInequality]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String)]),
    [_assertQueryCursorSnapshot]: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [dart.legacy(cloud_firestore.DocumentSnapshot)]),
    [_assertQueryCursorValues]: dart.fnType(dart.legacy(core.List), [dart.legacy(core.List)]),
    [_assertValidFieldType]: dart.fnType(dart.void, [dart.dynamic]),
    endAtDocument: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(cloud_firestore.DocumentSnapshot)]),
    endAt: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(core.List)]),
    endBeforeDocument: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(cloud_firestore.DocumentSnapshot)]),
    endBefore: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(core.List)]),
    get: dart.fnType(dart.legacy(async.Future$(dart.legacy(cloud_firestore.QuerySnapshot))), [], [dart.legacy(get_options.GetOptions)]),
    limit: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(core.int)]),
    limitToLast: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(core.int)]),
    snapshots: dart.fnType(dart.legacy(async.Stream$(dart.legacy(cloud_firestore.QuerySnapshot))), [], {includeMetadataChanges: dart.legacy(core.bool)}, {}),
    orderBy: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.dynamic], {descending: dart.legacy(core.bool)}, {}),
    startAfterDocument: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(cloud_firestore.DocumentSnapshot)]),
    startAfter: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(core.List)]),
    startAtDocument: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(cloud_firestore.DocumentSnapshot)]),
    startAt: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(core.List)]),
    where: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.dynamic], {arrayContains: dart.dynamic, arrayContainsAny: dart.legacy(core.List), isEqualTo: dart.dynamic, isGreaterThan: dart.dynamic, isGreaterThanOrEqualTo: dart.dynamic, isLessThan: dart.dynamic, isLessThanOrEqualTo: dart.dynamic, isNotEqualTo: dart.dynamic, isNull: dart.legacy(core.bool), whereIn: dart.legacy(core.List), whereNotIn: dart.legacy(core.List)}, {})
  }));
  dart.setGetterSignature(cloud_firestore.Query, () => ({
    __proto__: dart.getGetters(cloud_firestore.Query.__proto__),
    parameters: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))
  }));
  dart.setLibraryUri(cloud_firestore.Query, I[2]);
  dart.setFieldSignature(cloud_firestore.Query, () => ({
    __proto__: dart.getFields(cloud_firestore.Query.__proto__),
    firestore: dart.finalFieldType(dart.legacy(cloud_firestore.FirebaseFirestore)),
    [_delegate$0]: dart.finalFieldType(dart.legacy(platform_interface_query.QueryPlatform))
  }));
  cloud_firestore.CollectionReference = class CollectionReference extends cloud_firestore.Query {
    get [_delegate$0]() {
      return this[_delegate$];
    }
    set [_delegate$0](value) {
      super[_delegate$0] = value;
    }
    get id() {
      return this[_delegate$0].id;
    }
    get parent() {
      let _documentReferencePlatform = this[_delegate$0].parent;
      if (_documentReferencePlatform == null) {
        return null;
      }
      return new cloud_firestore.DocumentReference.__(this.firestore, _documentReferencePlatform);
    }
    get path() {
      return this[_delegate$0].path;
    }
    add(data) {
      return async.async(T$.DocumentReferenceL(), (function* add() {
        if (!(data != null)) dart.assertFailed(null, I[0], 44, 12, "data != null");
        let newDocument = this.doc();
        yield newDocument.set(data);
        return newDocument;
      }).bind(this));
    }
    doc(path = null) {
      if (path != null) {
        if (!path[$isNotEmpty]) dart.assertFailed("a document path must be a non-empty string", I[0], 58, 14, "path.isNotEmpty");
        if (!!path[$contains]("//")) dart.assertFailed("a document path must not contain '//'", I[0], 59, 14, "!path.contains(\"//\")");
        if (!(path !== "/")) dart.assertFailed("a document path must point to a valid document", I[0], 60, 14, "path != '/'");
      }
      return new cloud_firestore.DocumentReference.__(this.firestore, this[_delegate$0].doc(path));
    }
    _equals(o) {
      if (o == null) return false;
      return T$.CollectionReferenceL().is(o) && dart.equals(o.firestore, this.firestore) && o.path == this.path;
    }
    get hashCode() {
      return hash.hash2(this.firestore, this.path);
    }
    toString() {
      return dart.str(dart.wrapType(cloud_firestore.CollectionReference)) + "(" + dart.str(this.path) + ")";
    }
  };
  (cloud_firestore.CollectionReference.__ = function(firestore, _delegate) {
    this[_delegate$] = _delegate;
    cloud_firestore.CollectionReference.__proto__.__.call(this, firestore, _delegate);
    ;
  }).prototype = cloud_firestore.CollectionReference.prototype;
  dart.addTypeTests(cloud_firestore.CollectionReference);
  dart.addTypeCaches(cloud_firestore.CollectionReference);
  dart.setMethodSignature(cloud_firestore.CollectionReference, () => ({
    __proto__: dart.getMethods(cloud_firestore.CollectionReference.__proto__),
    add: dart.fnType(dart.legacy(async.Future$(dart.legacy(cloud_firestore.DocumentReference))), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]),
    doc: dart.fnType(dart.legacy(cloud_firestore.DocumentReference), [], [dart.legacy(core.String)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(cloud_firestore.CollectionReference, () => ({
    __proto__: dart.getGetters(cloud_firestore.CollectionReference.__proto__),
    id: dart.legacy(core.String),
    parent: dart.legacy(cloud_firestore.DocumentReference),
    path: dart.legacy(core.String),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(cloud_firestore.CollectionReference, I[2]);
  dart.setFieldSignature(cloud_firestore.CollectionReference, () => ({
    __proto__: dart.getFields(cloud_firestore.CollectionReference.__proto__),
    [_delegate$0]: dart.finalFieldType(dart.legacy(platform_interface_collection_reference.CollectionReferencePlatform))
  }));
  dart.defineExtensionMethods(cloud_firestore.CollectionReference, ['_equals', 'toString']);
  dart.defineExtensionAccessors(cloud_firestore.CollectionReference, ['hashCode']);
  var _firestore$ = dart.privateName(cloud_firestore, "_firestore");
  cloud_firestore.DocumentChange = class DocumentChange extends core.Object {
    get type() {
      return this[_delegate$0].type;
    }
    get oldIndex() {
      return this[_delegate$0].oldIndex;
    }
    get newIndex() {
      return this[_delegate$0].newIndex;
    }
    get doc() {
      return new cloud_firestore.DocumentSnapshot.__(this[_firestore$], this[_delegate$0].document);
    }
  };
  (cloud_firestore.DocumentChange.__ = function(_firestore, _delegate) {
    this[_firestore$] = _firestore;
    this[_delegate$0] = _delegate;
    platform_interface_document_change.DocumentChangePlatform.verifyExtends(this[_delegate$0]);
  }).prototype = cloud_firestore.DocumentChange.prototype;
  dart.addTypeTests(cloud_firestore.DocumentChange);
  dart.addTypeCaches(cloud_firestore.DocumentChange);
  dart.setGetterSignature(cloud_firestore.DocumentChange, () => ({
    __proto__: dart.getGetters(cloud_firestore.DocumentChange.__proto__),
    type: dart.legacy(platform_interface_document_change.DocumentChangeType),
    oldIndex: dart.legacy(core.int),
    newIndex: dart.legacy(core.int),
    doc: dart.legacy(cloud_firestore.DocumentSnapshot)
  }));
  dart.setLibraryUri(cloud_firestore.DocumentChange, I[2]);
  dart.setFieldSignature(cloud_firestore.DocumentChange, () => ({
    __proto__: dart.getFields(cloud_firestore.DocumentChange.__proto__),
    [_delegate$0]: dart.finalFieldType(dart.legacy(platform_interface_document_change.DocumentChangePlatform)),
    [_firestore$]: dart.finalFieldType(dart.legacy(cloud_firestore.FirebaseFirestore))
  }));
  var firestore$0 = dart.privateName(cloud_firestore, "DocumentReference.firestore");
  cloud_firestore.DocumentReference = class DocumentReference extends core.Object {
    get firestore() {
      return this[firestore$0];
    }
    set firestore(value) {
      super.firestore = value;
    }
    get id() {
      return this[_delegate$0].id;
    }
    get parent() {
      return new cloud_firestore.CollectionReference.__(this.firestore, this[_delegate$0].parent);
    }
    get path() {
      return this[_delegate$0].path;
    }
    collection(collectionPath) {
      if (!(collectionPath != null)) dart.assertFailed("a collection path cannot be null", I[3], 37, 12, "collectionPath != null");
      if (!collectionPath[$isNotEmpty]) dart.assertFailed("a collectionPath path must be a non-empty string", I[3], 38, 12, "collectionPath.isNotEmpty");
      if (!!collectionPath[$contains]("//")) dart.assertFailed("a collection path must not contain '//'", I[3], 40, 12, "!collectionPath.contains(\"//\")");
      if (!dart.test(cloud_firestore_platform_interface.isValidCollectionPath(collectionPath))) dart.assertFailed("a collection path must point to a valid collection.", I[3], 42, 12, "isValidCollectionPath(collectionPath)");
      return new cloud_firestore.CollectionReference.__(this.firestore, this[_delegate$0].collection(collectionPath));
    }
    delete() {
      return this[_delegate$0].delete();
    }
    get(options = null) {
      return async.async(T$.DocumentSnapshotL(), (function* get() {
        let t2;
        return new cloud_firestore.DocumentSnapshot.__(this.firestore, yield this[_delegate$0].get((t2 = options, t2 == null ? C[0] || CT.C0 : t2)));
      }).bind(this));
    }
    snapshots(opts) {
      let includeMetadataChanges = opts && 'includeMetadataChanges' in opts ? opts.includeMetadataChanges : false;
      return this[_delegate$0].snapshots({includeMetadataChanges: includeMetadataChanges}).map(T$.DocumentSnapshotL(), dart.fn(delegateSnapshot => new cloud_firestore.DocumentSnapshot.__(this.firestore, delegateSnapshot), T$.DocumentSnapshotPlatformLToDocumentSnapshotL()));
    }
    set(data, options = null) {
      if (!(data != null)) dart.assertFailed(null, I[3], 77, 12, "data != null");
      return this[_delegate$0].set(cloud_firestore._CodecUtility.replaceValueWithDelegatesInMap(data), options);
    }
    update(data) {
      if (!(data != null)) dart.assertFailed(null, I[3], 89, 12, "data != null");
      return this[_delegate$0].update(cloud_firestore._CodecUtility.replaceValueWithDelegatesInMap(data));
    }
    _equals(o) {
      if (o == null) return false;
      return T$.DocumentReferenceL().is(o) && dart.equals(o.firestore, this.firestore) && o.path == this.path;
    }
    get hashCode() {
      return hash.hash2(this.firestore, this.path);
    }
    toString() {
      return dart.str(dart.wrapType(cloud_firestore.DocumentReference)) + "(" + dart.str(this.path) + ")";
    }
  };
  (cloud_firestore.DocumentReference.__ = function(firestore, _delegate) {
    this[firestore$0] = firestore;
    this[_delegate$0] = _delegate;
    platform_interface_document_reference.DocumentReferencePlatform.verifyExtends(this[_delegate$0]);
  }).prototype = cloud_firestore.DocumentReference.prototype;
  dart.addTypeTests(cloud_firestore.DocumentReference);
  dart.addTypeCaches(cloud_firestore.DocumentReference);
  dart.setMethodSignature(cloud_firestore.DocumentReference, () => ({
    __proto__: dart.getMethods(cloud_firestore.DocumentReference.__proto__),
    collection: dart.fnType(dart.legacy(cloud_firestore.CollectionReference), [dart.legacy(core.String)]),
    delete: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    get: dart.fnType(dart.legacy(async.Future$(dart.legacy(cloud_firestore.DocumentSnapshot))), [], [dart.legacy(get_options.GetOptions)]),
    snapshots: dart.fnType(dart.legacy(async.Stream$(dart.legacy(cloud_firestore.DocumentSnapshot))), [], {includeMetadataChanges: dart.legacy(core.bool)}, {}),
    set: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))], [dart.legacy(set_options.SetOptions)]),
    update: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(cloud_firestore.DocumentReference, () => ({
    __proto__: dart.getGetters(cloud_firestore.DocumentReference.__proto__),
    id: dart.legacy(core.String),
    parent: dart.legacy(cloud_firestore.CollectionReference),
    path: dart.legacy(core.String),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(cloud_firestore.DocumentReference, I[2]);
  dart.setFieldSignature(cloud_firestore.DocumentReference, () => ({
    __proto__: dart.getFields(cloud_firestore.DocumentReference.__proto__),
    [_delegate$0]: dart.fieldType(dart.legacy(platform_interface_document_reference.DocumentReferencePlatform)),
    firestore: dart.finalFieldType(dart.legacy(cloud_firestore.FirebaseFirestore))
  }));
  dart.defineExtensionMethods(cloud_firestore.DocumentReference, ['_equals', 'toString']);
  dart.defineExtensionAccessors(cloud_firestore.DocumentReference, ['hashCode']);
  var _firestore$0 = dart.privateName(cloud_firestore, "DocumentSnapshot._firestore");
  var _delegate$2 = dart.privateName(cloud_firestore, "DocumentSnapshot._delegate");
  cloud_firestore.DocumentSnapshot = class DocumentSnapshot extends core.Object {
    get [_firestore$]() {
      return this[_firestore$0];
    }
    set [_firestore$](value) {
      super[_firestore$] = value;
    }
    get [_delegate$0]() {
      return this[_delegate$2];
    }
    set [_delegate$0](value) {
      super[_delegate$0] = value;
    }
    get id() {
      return this[_delegate$0].id;
    }
    get reference() {
      return this[_firestore$].doc(this[_delegate$0].reference.path);
    }
    get metadata() {
      return new cloud_firestore.SnapshotMetadata.__(this[_delegate$0].metadata);
    }
    get exists() {
      return this[_delegate$0].exists;
    }
    data() {
      return cloud_firestore._CodecUtility.replaceDelegatesWithValueInMap(this[_delegate$0].data(), this[_firestore$]);
    }
    get(field) {
      return cloud_firestore._CodecUtility.valueDecode(this[_delegate$0].get(field), this[_firestore$]);
    }
    _get(field) {
      return this.get(field);
    }
  };
  (cloud_firestore.DocumentSnapshot.__ = function(_firestore, _delegate) {
    this[_firestore$0] = _firestore;
    this[_delegate$2] = _delegate;
    platform_interface_document_snapshot.DocumentSnapshotPlatform.verifyExtends(this[_delegate$0]);
  }).prototype = cloud_firestore.DocumentSnapshot.prototype;
  dart.addTypeTests(cloud_firestore.DocumentSnapshot);
  dart.addTypeCaches(cloud_firestore.DocumentSnapshot);
  dart.setMethodSignature(cloud_firestore.DocumentSnapshot, () => ({
    __proto__: dart.getMethods(cloud_firestore.DocumentSnapshot.__proto__),
    data: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    get: dart.fnType(dart.dynamic, [dart.dynamic]),
    _get: dart.fnType(dart.dynamic, [dart.dynamic])
  }));
  dart.setGetterSignature(cloud_firestore.DocumentSnapshot, () => ({
    __proto__: dart.getGetters(cloud_firestore.DocumentSnapshot.__proto__),
    id: dart.legacy(core.String),
    reference: dart.legacy(cloud_firestore.DocumentReference),
    metadata: dart.legacy(cloud_firestore.SnapshotMetadata),
    exists: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(cloud_firestore.DocumentSnapshot, I[2]);
  dart.setFieldSignature(cloud_firestore.DocumentSnapshot, () => ({
    __proto__: dart.getFields(cloud_firestore.DocumentSnapshot.__proto__),
    [_firestore$]: dart.finalFieldType(dart.legacy(cloud_firestore.FirebaseFirestore)),
    [_delegate$0]: dart.finalFieldType(dart.legacy(platform_interface_document_snapshot.DocumentSnapshotPlatform))
  }));
  cloud_firestore.FieldValue = class FieldValue extends platform_interface_field_value.FieldValuePlatform {
    static arrayUnion(elements) {
      return new cloud_firestore.FieldValue.__(cloud_firestore.FieldValue._factory.arrayUnion(T$.ListL().as(cloud_firestore._CodecUtility.valueEncode(elements))));
    }
    static arrayRemove(elements) {
      return new cloud_firestore.FieldValue.__(cloud_firestore.FieldValue._factory.arrayRemove(T$.ListL().as(cloud_firestore._CodecUtility.valueEncode(elements))));
    }
    static delete() {
      return new cloud_firestore.FieldValue.__(cloud_firestore.FieldValue._factory.delete());
    }
    static serverTimestamp() {
      return new cloud_firestore.FieldValue.__(cloud_firestore.FieldValue._factory.serverTimestamp());
    }
    static increment(value) {
      return new cloud_firestore.FieldValue.__(cloud_firestore.FieldValue._factory.increment(value));
    }
    toString() {
      return dart.str(this.runtimeType) + "(" + dart.str(this[_delegate$0]) + ")";
    }
    _equals(o) {
      if (o == null) return false;
      return T$.FieldValueL().is(o) && dart.equals(o[_delegate$0], this[_delegate$0]);
    }
    get hashCode() {
      return dart.hashCode(this[_delegate$0]);
    }
  };
  (cloud_firestore.FieldValue.__ = function(_delegate) {
    this[_delegate$0] = _delegate;
    cloud_firestore.FieldValue.__proto__.new.call(this, _delegate);
    ;
  }).prototype = cloud_firestore.FieldValue.prototype;
  dart.addTypeTests(cloud_firestore.FieldValue);
  dart.addTypeCaches(cloud_firestore.FieldValue);
  dart.setMethodSignature(cloud_firestore.FieldValue, () => ({
    __proto__: dart.getMethods(cloud_firestore.FieldValue.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(cloud_firestore.FieldValue, () => ({
    __proto__: dart.getGetters(cloud_firestore.FieldValue.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(cloud_firestore.FieldValue, I[2]);
  dart.setFieldSignature(cloud_firestore.FieldValue, () => ({
    __proto__: dart.getFields(cloud_firestore.FieldValue.__proto__),
    [_delegate$0]: dart.fieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(cloud_firestore.FieldValue, ['toString', '_equals']);
  dart.defineExtensionAccessors(cloud_firestore.FieldValue, ['hashCode']);
  dart.defineLazy(cloud_firestore.FieldValue, {
    /*cloud_firestore.FieldValue._factory*/get _factory() {
      return platform_interface_field_value_factory.FieldValueFactoryPlatform.instance;
    }
  }, true);
  var app$ = dart.privateName(cloud_firestore, "FirebaseFirestore.app");
  var _delegatePackingProperty = dart.privateName(cloud_firestore, "_delegatePackingProperty");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  cloud_firestore.FirebaseFirestore = class FirebaseFirestore extends firebase_core_platform_interface.FirebasePluginPlatform {
    get app() {
      return this[app$];
    }
    set app(value) {
      this[app$] = value;
    }
    get [_delegate$0]() {
      if (this[_delegatePackingProperty] == null) {
        this[_delegatePackingProperty] = platform_interface_firestore.FirebaseFirestorePlatform.instanceFor({app: this.app});
      }
      return this[_delegatePackingProperty];
    }
    static get instance() {
      return cloud_firestore.FirebaseFirestore.instanceFor({app: firebase_core.Firebase.app()});
    }
    static instanceFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      if (!(app != null)) dart.assertFailed(null, I[4], 49, 12, "app != null");
      if (dart.test(cloud_firestore.FirebaseFirestore._cachedInstances[$containsKey](app.name))) {
        return cloud_firestore.FirebaseFirestore._cachedInstances[$_get](app.name);
      }
      let newInstance = new cloud_firestore.FirebaseFirestore.__({app: app});
      cloud_firestore.FirebaseFirestore._cachedInstances[$_set](app.name, newInstance);
      return newInstance;
    }
    collection(collectionPath) {
      if (!(collectionPath != null)) dart.assertFailed("a collection path cannot be null", I[4], 62, 12, "collectionPath != null");
      if (!collectionPath[$isNotEmpty]) dart.assertFailed("a collectionPath path must be a non-empty string", I[4], 63, 12, "collectionPath.isNotEmpty");
      if (!!collectionPath[$contains]("//")) dart.assertFailed("a collection path must not contain '//'", I[4], 65, 12, "!collectionPath.contains(\"//\")");
      if (!dart.test(cloud_firestore_platform_interface.isValidCollectionPath(collectionPath))) dart.assertFailed("a collection path must point to a valid collection.", I[4], 67, 12, "isValidCollectionPath(collectionPath)");
      return new cloud_firestore.CollectionReference.__(this, this[_delegate$0].collection(collectionPath));
    }
    batch() {
      return new cloud_firestore.WriteBatch.__(this, this[_delegate$0].batch());
    }
    clearPersistence() {
      return this[_delegate$0].clearPersistence();
    }
    enablePersistence(persistenceSettings = null) {
      return async.async(dart.void, (function* enablePersistence() {
        return this[_delegate$0].enablePersistence(persistenceSettings);
      }).bind(this));
    }
    collectionGroup(collectionPath) {
      if (!(collectionPath != null)) dart.assertFailed("a collection path cannot be null", I[4], 97, 12, "collectionPath != null");
      if (!collectionPath[$isNotEmpty]) dart.assertFailed("a collection path must be a non-empty string", I[4], 98, 12, "collectionPath.isNotEmpty");
      if (!!collectionPath[$contains]("/")) dart.assertFailed("a collection path passed to collectionGroup() cannot contain '/'", I[4], 100, 12, "!collectionPath.contains(\"/\")");
      return new cloud_firestore.Query.__(this, this[_delegate$0].collectionGroup(collectionPath));
    }
    disableNetwork() {
      return this[_delegate$0].disableNetwork();
    }
    doc(documentPath) {
      if (!(documentPath != null)) dart.assertFailed("a document path cannot be null", I[4], 117, 12, "documentPath != null");
      if (!documentPath[$isNotEmpty]) dart.assertFailed("a document path must be a non-empty string", I[4], 119, 9, "documentPath.isNotEmpty");
      if (!!documentPath[$contains]("//")) dart.assertFailed("a collection path must not contain '//'", I[4], 120, 12, "!documentPath.contains(\"//\")");
      if (!dart.test(cloud_firestore_platform_interface.isValidDocumentPath(documentPath))) dart.assertFailed("a document path must point to a valid document.", I[4], 122, 12, "isValidDocumentPath(documentPath)");
      return new cloud_firestore.DocumentReference.__(this, this[_delegate$0].doc(documentPath));
    }
    enableNetwork() {
      return this[_delegate$0].enableNetwork();
    }
    snapshotsInSync() {
      return this[_delegate$0].snapshotsInSync();
    }
    runTransaction(T, transactionHandler, opts) {
      let timeout = opts && 'timeout' in opts ? opts.timeout : C[4] || CT.C4;
      return async.async(dart.legacy(T), (function* runTransaction() {
        if (!(transactionHandler != null)) dart.assertFailed("transactionHandler cannot be null", I[4], 163, 12, "transactionHandler != null");
        let output = null;
        yield this[_delegate$0].runTransaction(core.Null, dart.fn(transaction => async.async(core.Null, (function*() {
          output = (yield transactionHandler(new cloud_firestore.Transaction.__(this, transaction)));
        }).bind(this)), T$.TransactionPlatformLToFutureLOfNull()), {timeout: timeout});
        return output;
      }).bind(this));
    }
    set settings(settings) {
      this[_delegate$0].settings = settings;
    }
    get settings() {
      return this[_delegate$0].settings;
    }
    terminate() {
      return this[_delegate$0].terminate();
    }
    waitForPendingWrites() {
      return this[_delegate$0].waitForPendingWrites();
    }
    _equals(o) {
      if (o == null) return false;
      return T$.FirebaseFirestoreL().is(o) && o.app.name == this.app.name;
    }
    get hashCode() {
      return hash.hash2(this.app.name, this.app.options);
    }
    toString() {
      return dart.str(dart.wrapType(cloud_firestore.FirebaseFirestore)) + "(app: " + dart.str(this.app.name) + ")";
    }
  };
  (cloud_firestore.FirebaseFirestore.__ = function(opts) {
    let app = opts && 'app' in opts ? opts.app : null;
    this[_delegatePackingProperty] = null;
    this[app$] = app;
    cloud_firestore.FirebaseFirestore.__proto__.new.call(this, app.name, "plugins.flutter.io/firebase_firestore");
    ;
  }).prototype = cloud_firestore.FirebaseFirestore.prototype;
  dart.addTypeTests(cloud_firestore.FirebaseFirestore);
  dart.addTypeCaches(cloud_firestore.FirebaseFirestore);
  dart.setMethodSignature(cloud_firestore.FirebaseFirestore, () => ({
    __proto__: dart.getMethods(cloud_firestore.FirebaseFirestore.__proto__),
    collection: dart.fnType(dart.legacy(cloud_firestore.CollectionReference), [dart.legacy(core.String)]),
    batch: dart.fnType(dart.legacy(cloud_firestore.WriteBatch), []),
    clearPersistence: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    enablePersistence: dart.fnType(dart.legacy(async.Future$(dart.void)), [], [dart.legacy(persistence_settings.PersistenceSettings)]),
    collectionGroup: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(core.String)]),
    disableNetwork: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    doc: dart.fnType(dart.legacy(cloud_firestore.DocumentReference), [dart.legacy(core.String)]),
    enableNetwork: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    snapshotsInSync: dart.fnType(dart.legacy(async.Stream$(dart.void)), []),
    runTransaction: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(cloud_firestore.Transaction)]))], {timeout: dart.legacy(core.Duration)}, {}]),
    terminate: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    waitForPendingWrites: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(cloud_firestore.FirebaseFirestore, () => ({
    __proto__: dart.getGetters(cloud_firestore.FirebaseFirestore.__proto__),
    [_delegate$0]: dart.legacy(platform_interface_firestore.FirebaseFirestorePlatform),
    settings: dart.legacy(settings.Settings),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setSetterSignature(cloud_firestore.FirebaseFirestore, () => ({
    __proto__: dart.getSetters(cloud_firestore.FirebaseFirestore.__proto__),
    settings: dart.legacy(settings.Settings)
  }));
  dart.setLibraryUri(cloud_firestore.FirebaseFirestore, I[2]);
  dart.setFieldSignature(cloud_firestore.FirebaseFirestore, () => ({
    __proto__: dart.getFields(cloud_firestore.FirebaseFirestore.__proto__),
    [_delegatePackingProperty]: dart.fieldType(dart.legacy(platform_interface_firestore.FirebaseFirestorePlatform)),
    app: dart.fieldType(dart.legacy(firebase_core.FirebaseApp))
  }));
  dart.defineExtensionMethods(cloud_firestore.FirebaseFirestore, ['_equals', 'toString']);
  dart.defineExtensionAccessors(cloud_firestore.FirebaseFirestore, ['hashCode']);
  dart.defineLazy(cloud_firestore.FirebaseFirestore, {
    /*cloud_firestore.FirebaseFirestore._cachedInstances*/get _cachedInstances() {
      return new (T$.IdentityMapOfStringL$FirebaseFirestoreL()).new();
    }
  }, true);
  var _firestore$1 = dart.privateName(cloud_firestore, "QueryDocumentSnapshot._firestore");
  var _delegate$3 = dart.privateName(cloud_firestore, "QueryDocumentSnapshot._delegate");
  cloud_firestore.QueryDocumentSnapshot = class QueryDocumentSnapshot extends cloud_firestore.DocumentSnapshot {
    get [_firestore$]() {
      return this[_firestore$1];
    }
    set [_firestore$](value) {
      super[_firestore$] = value;
    }
    get [_delegate$0]() {
      return this[_delegate$3];
    }
    set [_delegate$0](value) {
      super[_delegate$0] = value;
    }
    get exists() {
      return true;
    }
  };
  (cloud_firestore.QueryDocumentSnapshot.__ = function(_firestore, _delegate) {
    this[_firestore$1] = _firestore;
    this[_delegate$3] = _delegate;
    cloud_firestore.QueryDocumentSnapshot.__proto__.__.call(this, _firestore, _delegate);
    ;
  }).prototype = cloud_firestore.QueryDocumentSnapshot.prototype;
  dart.addTypeTests(cloud_firestore.QueryDocumentSnapshot);
  dart.addTypeCaches(cloud_firestore.QueryDocumentSnapshot);
  dart.setLibraryUri(cloud_firestore.QueryDocumentSnapshot, I[2]);
  dart.setFieldSignature(cloud_firestore.QueryDocumentSnapshot, () => ({
    __proto__: dart.getFields(cloud_firestore.QueryDocumentSnapshot.__proto__),
    [_firestore$]: dart.finalFieldType(dart.legacy(cloud_firestore.FirebaseFirestore)),
    [_delegate$0]: dart.finalFieldType(dart.legacy(platform_interface_document_snapshot.DocumentSnapshotPlatform))
  }));
  cloud_firestore.QuerySnapshot = class QuerySnapshot extends core.Object {
    get docs() {
      return this[_delegate$0].docs[$map](T$.QueryDocumentSnapshotL(), dart.fn(documentDelegate => new cloud_firestore.QueryDocumentSnapshot.__(this[_firestore$], documentDelegate), T$.DocumentSnapshotPlatformLToQueryDocumentSnapshotL()))[$toList]();
    }
    get docChanges() {
      return this[_delegate$0].docChanges[$map](T$.DocumentChangeL(), dart.fn(documentDelegate => new cloud_firestore.DocumentChange.__(this[_firestore$], documentDelegate), T$.DocumentChangePlatformLToDocumentChangeL()))[$toList]();
    }
    get metadata() {
      return new cloud_firestore.SnapshotMetadata.__(this[_delegate$0].metadata);
    }
    get size() {
      return this[_delegate$0].size;
    }
  };
  (cloud_firestore.QuerySnapshot.__ = function(_firestore, _delegate) {
    this[_firestore$] = _firestore;
    this[_delegate$0] = _delegate;
    platform_interface_query_snapshot.QuerySnapshotPlatform.verifyExtends(this[_delegate$0]);
  }).prototype = cloud_firestore.QuerySnapshot.prototype;
  dart.addTypeTests(cloud_firestore.QuerySnapshot);
  dart.addTypeCaches(cloud_firestore.QuerySnapshot);
  dart.setGetterSignature(cloud_firestore.QuerySnapshot, () => ({
    __proto__: dart.getGetters(cloud_firestore.QuerySnapshot.__proto__),
    docs: dart.legacy(core.List$(dart.legacy(cloud_firestore.QueryDocumentSnapshot))),
    docChanges: dart.legacy(core.List$(dart.legacy(cloud_firestore.DocumentChange))),
    metadata: dart.legacy(cloud_firestore.SnapshotMetadata),
    size: dart.legacy(core.int)
  }));
  dart.setLibraryUri(cloud_firestore.QuerySnapshot, I[2]);
  dart.setFieldSignature(cloud_firestore.QuerySnapshot, () => ({
    __proto__: dart.getFields(cloud_firestore.QuerySnapshot.__proto__),
    [_firestore$]: dart.finalFieldType(dart.legacy(cloud_firestore.FirebaseFirestore)),
    [_delegate$0]: dart.finalFieldType(dart.legacy(platform_interface_query_snapshot.QuerySnapshotPlatform))
  }));
  cloud_firestore.SnapshotMetadata = class SnapshotMetadata extends core.Object {
    get hasPendingWrites() {
      return this[_delegate$0].hasPendingWrites;
    }
    get isFromCache() {
      return this[_delegate$0].isFromCache;
    }
  };
  (cloud_firestore.SnapshotMetadata.__ = function(_delegate) {
    this[_delegate$0] = _delegate;
    ;
  }).prototype = cloud_firestore.SnapshotMetadata.prototype;
  dart.addTypeTests(cloud_firestore.SnapshotMetadata);
  dart.addTypeCaches(cloud_firestore.SnapshotMetadata);
  dart.setGetterSignature(cloud_firestore.SnapshotMetadata, () => ({
    __proto__: dart.getGetters(cloud_firestore.SnapshotMetadata.__proto__),
    hasPendingWrites: dart.legacy(core.bool),
    isFromCache: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(cloud_firestore.SnapshotMetadata, I[2]);
  dart.setFieldSignature(cloud_firestore.SnapshotMetadata, () => ({
    __proto__: dart.getFields(cloud_firestore.SnapshotMetadata.__proto__),
    [_delegate$0]: dart.fieldType(dart.legacy(snapshot_metadata.SnapshotMetadataPlatform))
  }));
  cloud_firestore.Transaction = class Transaction extends core.Object {
    get(documentReference) {
      return async.async(T$.DocumentSnapshotL(), (function* get() {
        let documentSnapshotPlatform = (yield this[_delegate$0].get(documentReference.path));
        return new cloud_firestore.DocumentSnapshot.__(this[_firestore$], documentSnapshotPlatform);
      }).bind(this));
    }
    delete(documentReference) {
      if (!(documentReference != null)) dart.assertFailed(null, I[5], 33, 12, "documentReference != null");
      if (!dart.equals(documentReference.firestore, this[_firestore$])) dart.assertFailed("the document provided is from a different Firestore instance", I[5], 34, 12, "documentReference.firestore == _firestore");
      return new cloud_firestore.Transaction.__(this[_firestore$], this[_delegate$0].delete(documentReference.path));
    }
    update(documentReference, data) {
      if (!(documentReference != null)) dart.assertFailed(null, I[5], 44, 12, "documentReference != null");
      if (!(data != null)) dart.assertFailed(null, I[5], 45, 12, "data != null");
      if (!dart.equals(documentReference.firestore, this[_firestore$])) dart.assertFailed("the document provided is from a different Firestore instance", I[5], 46, 12, "documentReference.firestore == _firestore");
      return new cloud_firestore.Transaction.__(this[_firestore$], this[_delegate$0].update(documentReference.path, cloud_firestore._CodecUtility.replaceValueWithDelegatesInMap(data)));
    }
    set(documentReference, data, options = null) {
      if (!dart.equals(documentReference.firestore, this[_firestore$])) dart.assertFailed("the document provided is from a different Firestore instance", I[5], 61, 12, "documentReference.firestore == _firestore");
      return new cloud_firestore.Transaction.__(this[_firestore$], this[_delegate$0].set(documentReference.path, cloud_firestore._CodecUtility.replaceValueWithDelegatesInMap(data), options));
    }
  };
  (cloud_firestore.Transaction.__ = function(_firestore, _delegate) {
    this[_firestore$] = _firestore;
    this[_delegate$0] = _delegate;
    platform_interface_transaction.TransactionPlatform.verifyExtends(this[_delegate$0]);
  }).prototype = cloud_firestore.Transaction.prototype;
  dart.addTypeTests(cloud_firestore.Transaction);
  dart.addTypeCaches(cloud_firestore.Transaction);
  dart.setMethodSignature(cloud_firestore.Transaction, () => ({
    __proto__: dart.getMethods(cloud_firestore.Transaction.__proto__),
    get: dart.fnType(dart.legacy(async.Future$(dart.legacy(cloud_firestore.DocumentSnapshot))), [dart.legacy(cloud_firestore.DocumentReference)]),
    delete: dart.fnType(dart.legacy(cloud_firestore.Transaction), [dart.legacy(cloud_firestore.DocumentReference)]),
    update: dart.fnType(dart.legacy(cloud_firestore.Transaction), [dart.legacy(cloud_firestore.DocumentReference), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]),
    set: dart.fnType(dart.legacy(cloud_firestore.Transaction), [dart.legacy(cloud_firestore.DocumentReference), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))], [dart.legacy(set_options.SetOptions)])
  }));
  dart.setLibraryUri(cloud_firestore.Transaction, I[2]);
  dart.setFieldSignature(cloud_firestore.Transaction, () => ({
    __proto__: dart.getFields(cloud_firestore.Transaction.__proto__),
    [_firestore$]: dart.finalFieldType(dart.legacy(cloud_firestore.FirebaseFirestore)),
    [_delegate$0]: dart.finalFieldType(dart.legacy(platform_interface_transaction.TransactionPlatform))
  }));
  cloud_firestore._CodecUtility = class _CodecUtility extends core.Object {
    static replaceValueWithDelegatesInMap(data) {
      if (data == null) {
        return null;
      }
      let output = T$.LinkedHashMapOfStringL$dynamic().from(data);
      output[$updateAll](dart.fn((_, value) => cloud_firestore._CodecUtility.valueEncode(value), T$.StringLAnddynamicTodynamic()));
      return output;
    }
    static replaceValueWithDelegatesInArray(data) {
      if (data == null) {
        return null;
      }
      return core.List.from(data)[$map](dart.dynamic, dart.fn(value => cloud_firestore._CodecUtility.valueEncode(value), T$.dynamicTodynamic()))[$toList]();
    }
    static replaceDelegatesWithValueInMap(data, firestore) {
      if (data == null) {
        return null;
      }
      let output = T$.LinkedHashMapOfStringL$dynamic().from(data);
      output[$updateAll](dart.fn((_, value) => cloud_firestore._CodecUtility.valueDecode(value, firestore), T$.StringLAnddynamicTodynamic()));
      return output;
    }
    static replaceDelegatesWithValueInArray(data, firestore) {
      if (data == null) {
        return null;
      }
      return core.List.from(data)[$map](dart.dynamic, dart.fn(value => cloud_firestore._CodecUtility.valueDecode(value, firestore), T$.dynamicTodynamic()))[$toList]();
    }
    static valueEncode(value) {
      if (T$.DocumentReferenceL().is(value)) {
        return value[_delegate$0];
      } else if (T$.ListL().is(value)) {
        return cloud_firestore._CodecUtility.replaceValueWithDelegatesInArray(value);
      } else if (T$.MapL().is(value)) {
        return cloud_firestore._CodecUtility.replaceValueWithDelegatesInMap(value);
      }
      return value;
    }
    static valueDecode(value, firestore) {
      if (T$.DocumentReferencePlatformL().is(value)) {
        return new cloud_firestore.DocumentReference.__(firestore, value);
      } else if (T$.ListL().is(value)) {
        return cloud_firestore._CodecUtility.replaceDelegatesWithValueInArray(value, firestore);
      } else if (T$.MapL().is(value)) {
        return cloud_firestore._CodecUtility.replaceDelegatesWithValueInMap(value, firestore);
      }
      return value;
    }
  };
  (cloud_firestore._CodecUtility.new = function() {
    ;
  }).prototype = cloud_firestore._CodecUtility.prototype;
  dart.addTypeTests(cloud_firestore._CodecUtility);
  dart.addTypeCaches(cloud_firestore._CodecUtility);
  dart.setLibraryUri(cloud_firestore._CodecUtility, I[2]);
  cloud_firestore.WriteBatch = class WriteBatch extends core.Object {
    commit() {
      return this[_delegate$0].commit();
    }
    delete(document) {
      if (!(document != null)) dart.assertFailed(null, I[6], 28, 12, "document != null");
      if (!dart.equals(document.firestore, this[_firestore$])) dart.assertFailed("the document provided is from a different Firestore instance", I[6], 29, 12, "document.firestore == _firestore");
      return this[_delegate$0].delete(document.path);
    }
    set(document, data, options = null) {
      if (!(document != null)) dart.assertFailed(null, I[6], 42, 12, "document != null");
      if (!(data != null)) dart.assertFailed(null, I[6], 43, 12, "data != null");
      if (!dart.equals(document.firestore, this[_firestore$])) dart.assertFailed("the document provided is from a different Firestore instance", I[6], 44, 12, "document.firestore == _firestore");
      return this[_delegate$0].set(document.path, cloud_firestore._CodecUtility.replaceValueWithDelegatesInMap(data), options);
    }
    update(document, data) {
      if (!(document != null)) dart.assertFailed(null, I[6], 57, 12, "document != null");
      if (!(data != null)) dart.assertFailed(null, I[6], 58, 12, "data != null");
      if (!dart.equals(document.firestore, this[_firestore$])) dart.assertFailed("the document provided is from a different Firestore instance", I[6], 59, 12, "document.firestore == _firestore");
      return this[_delegate$0].update(document.path, cloud_firestore._CodecUtility.replaceValueWithDelegatesInMap(data));
    }
  };
  (cloud_firestore.WriteBatch.__ = function(_firestore, _delegate) {
    this[_firestore$] = _firestore;
    this[_delegate$0] = _delegate;
    platform_interface_write_batch.WriteBatchPlatform.verifyExtends(this[_delegate$0]);
  }).prototype = cloud_firestore.WriteBatch.prototype;
  dart.addTypeTests(cloud_firestore.WriteBatch);
  dart.addTypeCaches(cloud_firestore.WriteBatch);
  dart.setMethodSignature(cloud_firestore.WriteBatch, () => ({
    __proto__: dart.getMethods(cloud_firestore.WriteBatch.__proto__),
    commit: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    delete: dart.fnType(dart.void, [dart.legacy(cloud_firestore.DocumentReference)]),
    set: dart.fnType(dart.void, [dart.legacy(cloud_firestore.DocumentReference), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))], [dart.legacy(set_options.SetOptions)]),
    update: dart.fnType(dart.void, [dart.legacy(cloud_firestore.DocumentReference), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))])
  }));
  dart.setLibraryUri(cloud_firestore.WriteBatch, I[2]);
  dart.setFieldSignature(cloud_firestore.WriteBatch, () => ({
    __proto__: dart.getFields(cloud_firestore.WriteBatch.__proto__),
    [_firestore$]: dart.finalFieldType(dart.legacy(cloud_firestore.FirebaseFirestore)),
    [_delegate$0]: dart.finalFieldType(dart.legacy(platform_interface_write_batch.WriteBatchPlatform))
  }));
  dart.trackLibraries("packages/cloud_firestore/cloud_firestore.dart", {
    "package:cloud_firestore/cloud_firestore.dart": cloud_firestore
  }, {
    "package:cloud_firestore/cloud_firestore.dart": ["src/collection_reference.dart", "src/document_change.dart", "src/document_reference.dart", "src/document_snapshot.dart", "src/field_value.dart", "src/firestore.dart", "src/query.dart", "src/query_document_snapshot.dart", "src/query_snapshot.dart", "src/snapshot_metadata.dart", "src/transaction.dart", "src/utils/codec_utility.dart", "src/write_batch.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["src/query.dart","src/collection_reference.dart","src/document_change.dart","src/document_reference.dart","src/document_snapshot.dart","src/field_value.dart","src/firestore.dart","src/query_document_snapshot.dart","src/query_snapshot.dart","src/snapshot_metadata.dart","src/transaction.dart","src/utils/codec_utility.dart","src/write_batch.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/cloud_firestore/cloud_firestore.dart.lib.js"}');
  // Exports:
  return {
    cloud_firestore: cloud_firestore
  };
}));

//# sourceMappingURL=cloud_firestore.dart.lib.js.map
